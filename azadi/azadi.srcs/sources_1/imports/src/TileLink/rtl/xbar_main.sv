// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// xbar_main module generated by `tlgen.py` tool
// all reset signals should be generated from one reset signal to not make any deadlock
//
// Interconnect
// brqif
//   -> s1n_14
//     -> iccm
//     -> asf_15
//       -> debug_rom
//     -> sm1_16
//       -> flash_ctrl
// brqlsu
//   -> asf_17
//     -> s1n_18
//       -> sm1_19
//         -> dccm
//       -> sm1_16
//         -> flash_ctrl
//       -> sm1_21
//         -> asf_20
//           -> timer0
//       -> sm1_23
//         -> asf_22
//           -> timer1
//       -> sm1_25
//         -> asf_24
//           -> timer2
//       -> sm1_27
//         -> asf_26
//           -> timer3
//       -> sm1_29
//         -> asf_28
//           -> timer4
//       -> sm1_31
//         -> asf_30
//           -> plic
//       -> sm1_33
//         -> asf_32
//           -> xbar_peri
// dm_sba
//   -> asf_34
//     -> s1n_35
//       -> sm1_19
//         -> dccm
//       -> sm1_16
//         -> flash_ctrl
//       -> sm1_21
//         -> asf_20
//           -> timer0
//       -> sm1_23
//         -> asf_22
//           -> timer1
//       -> sm1_25
//         -> asf_24
//           -> timer2
//       -> sm1_27
//         -> asf_26
//           -> timer3
//       -> sm1_29
//         -> asf_28
//           -> timer4
//       -> sm1_31
//         -> asf_30
//           -> plic
//       -> sm1_33
//         -> asf_32
//           -> xbar_peri

module xbar_main (
  input clk_main_i,
  input clk_jtag_i,
  input clk_periph_i,
  input rst_main_ni,
  input rst_jtag_ni,
  input rst_periph_ni,

  // Host interfaces
  input  tlul_pkg::tl_h2d_t tl_brqif_i,
  output tlul_pkg::tl_d2h_t tl_brqif_o,
  input  tlul_pkg::tl_h2d_t tl_brqlsu_i,
  output tlul_pkg::tl_d2h_t tl_brqlsu_o,
  input  tlul_pkg::tl_h2d_t tl_dm_sba_i,
  output tlul_pkg::tl_d2h_t tl_dm_sba_o,

  // Device interfaces
  output tlul_pkg::tl_h2d_t tl_iccm_o,
  input  tlul_pkg::tl_d2h_t tl_iccm_i,
  output tlul_pkg::tl_h2d_t tl_debug_rom_o,
  input  tlul_pkg::tl_d2h_t tl_debug_rom_i,
  output tlul_pkg::tl_h2d_t tl_dccm_o,
  input  tlul_pkg::tl_d2h_t tl_dccm_i,
  output tlul_pkg::tl_h2d_t tl_flash_ctrl_o,
  input  tlul_pkg::tl_d2h_t tl_flash_ctrl_i,
  output tlul_pkg::tl_h2d_t tl_timer0_o,
  input  tlul_pkg::tl_d2h_t tl_timer0_i,
  output tlul_pkg::tl_h2d_t tl_timer1_o,
  input  tlul_pkg::tl_d2h_t tl_timer1_i,
  output tlul_pkg::tl_h2d_t tl_timer2_o,
  input  tlul_pkg::tl_d2h_t tl_timer2_i,
  output tlul_pkg::tl_h2d_t tl_timer3_o,
  input  tlul_pkg::tl_d2h_t tl_timer3_i,
  output tlul_pkg::tl_h2d_t tl_timer4_o,
  input  tlul_pkg::tl_d2h_t tl_timer4_i,
  output tlul_pkg::tl_h2d_t tl_plic_o,
  input  tlul_pkg::tl_d2h_t tl_plic_i,
  output tlul_pkg::tl_h2d_t tl_xbar_peri_o,
  input  tlul_pkg::tl_d2h_t tl_xbar_peri_i,

  input scanmode_i
);

  import tlul_pkg::*;
  import tl_main_pkg::*;

  // scanmode_i is currently not used, but provisioned for future use
  // this assignment prevents lint warnings
  logic unused_scanmode;
  assign unused_scanmode = scanmode_i;

  tl_h2d_t tl_s1n_14_us_h2d ;
  tl_d2h_t tl_s1n_14_us_d2h ;


  tl_h2d_t tl_s1n_14_ds_h2d [3];
  tl_d2h_t tl_s1n_14_ds_d2h [3];

  // Create steering signal
  logic [1:0] dev_sel_s1n_14;

  tl_h2d_t tl_asf_15_us_h2d ;
  tl_d2h_t tl_asf_15_us_d2h ;
  tl_h2d_t tl_asf_15_ds_h2d ;
  tl_d2h_t tl_asf_15_ds_d2h ;


  tl_h2d_t tl_sm1_16_us_h2d [3];
  tl_d2h_t tl_sm1_16_us_d2h [3];

  tl_h2d_t tl_sm1_16_ds_h2d ;
  tl_d2h_t tl_sm1_16_ds_d2h ;

  tl_h2d_t tl_asf_17_us_h2d ;
  tl_d2h_t tl_asf_17_us_d2h ;
  tl_h2d_t tl_asf_17_ds_h2d ;
  tl_d2h_t tl_asf_17_ds_d2h ;

  tl_h2d_t tl_s1n_18_us_h2d ;
  tl_d2h_t tl_s1n_18_us_d2h ;


  tl_h2d_t tl_s1n_18_ds_h2d [9];
  tl_d2h_t tl_s1n_18_ds_d2h [9];

  // Create steering signal
  logic [3:0] dev_sel_s1n_18;


  tl_h2d_t tl_sm1_19_us_h2d [2];
  tl_d2h_t tl_sm1_19_us_d2h [2];

  tl_h2d_t tl_sm1_19_ds_h2d ;
  tl_d2h_t tl_sm1_19_ds_d2h ;

  tl_h2d_t tl_asf_20_us_h2d ;
  tl_d2h_t tl_asf_20_us_d2h ;
  tl_h2d_t tl_asf_20_ds_h2d ;
  tl_d2h_t tl_asf_20_ds_d2h ;


  tl_h2d_t tl_sm1_21_us_h2d [2];
  tl_d2h_t tl_sm1_21_us_d2h [2];

  tl_h2d_t tl_sm1_21_ds_h2d ;
  tl_d2h_t tl_sm1_21_ds_d2h ;

  tl_h2d_t tl_asf_22_us_h2d ;
  tl_d2h_t tl_asf_22_us_d2h ;
  tl_h2d_t tl_asf_22_ds_h2d ;
  tl_d2h_t tl_asf_22_ds_d2h ;


  tl_h2d_t tl_sm1_23_us_h2d [2];
  tl_d2h_t tl_sm1_23_us_d2h [2];

  tl_h2d_t tl_sm1_23_ds_h2d ;
  tl_d2h_t tl_sm1_23_ds_d2h ;

  tl_h2d_t tl_asf_24_us_h2d ;
  tl_d2h_t tl_asf_24_us_d2h ;
  tl_h2d_t tl_asf_24_ds_h2d ;
  tl_d2h_t tl_asf_24_ds_d2h ;


  tl_h2d_t tl_sm1_25_us_h2d [2];
  tl_d2h_t tl_sm1_25_us_d2h [2];

  tl_h2d_t tl_sm1_25_ds_h2d ;
  tl_d2h_t tl_sm1_25_ds_d2h ;

  tl_h2d_t tl_asf_26_us_h2d ;
  tl_d2h_t tl_asf_26_us_d2h ;
  tl_h2d_t tl_asf_26_ds_h2d ;
  tl_d2h_t tl_asf_26_ds_d2h ;


  tl_h2d_t tl_sm1_27_us_h2d [2];
  tl_d2h_t tl_sm1_27_us_d2h [2];

  tl_h2d_t tl_sm1_27_ds_h2d ;
  tl_d2h_t tl_sm1_27_ds_d2h ;

  tl_h2d_t tl_asf_28_us_h2d ;
  tl_d2h_t tl_asf_28_us_d2h ;
  tl_h2d_t tl_asf_28_ds_h2d ;
  tl_d2h_t tl_asf_28_ds_d2h ;


  tl_h2d_t tl_sm1_29_us_h2d [2];
  tl_d2h_t tl_sm1_29_us_d2h [2];

  tl_h2d_t tl_sm1_29_ds_h2d ;
  tl_d2h_t tl_sm1_29_ds_d2h ;

  tl_h2d_t tl_asf_30_us_h2d ;
  tl_d2h_t tl_asf_30_us_d2h ;
  tl_h2d_t tl_asf_30_ds_h2d ;
  tl_d2h_t tl_asf_30_ds_d2h ;


  tl_h2d_t tl_sm1_31_us_h2d [2];
  tl_d2h_t tl_sm1_31_us_d2h [2];

  tl_h2d_t tl_sm1_31_ds_h2d ;
  tl_d2h_t tl_sm1_31_ds_d2h ;

  tl_h2d_t tl_asf_32_us_h2d ;
  tl_d2h_t tl_asf_32_us_d2h ;
  tl_h2d_t tl_asf_32_ds_h2d ;
  tl_d2h_t tl_asf_32_ds_d2h ;


  tl_h2d_t tl_sm1_33_us_h2d [2];
  tl_d2h_t tl_sm1_33_us_d2h [2];

  tl_h2d_t tl_sm1_33_ds_h2d ;
  tl_d2h_t tl_sm1_33_ds_d2h ;

  tl_h2d_t tl_asf_34_us_h2d ;
  tl_d2h_t tl_asf_34_us_d2h ;
  tl_h2d_t tl_asf_34_ds_h2d ;
  tl_d2h_t tl_asf_34_ds_d2h ;

  tl_h2d_t tl_s1n_35_us_h2d ;
  tl_d2h_t tl_s1n_35_us_d2h ;


  tl_h2d_t tl_s1n_35_ds_h2d [9];
  tl_d2h_t tl_s1n_35_ds_d2h [9];

  // Create steering signal
  logic [3:0] dev_sel_s1n_35;



  assign tl_iccm_o = tl_s1n_14_ds_h2d[0];
  assign tl_s1n_14_ds_d2h[0] = tl_iccm_i;

  assign tl_asf_15_us_h2d = tl_s1n_14_ds_h2d[1];
  assign tl_s1n_14_ds_d2h[1] = tl_asf_15_us_d2h;

  assign tl_sm1_16_us_h2d[0] = tl_s1n_14_ds_h2d[2];
  assign tl_s1n_14_ds_d2h[2] = tl_sm1_16_us_d2h[0];

  assign tl_sm1_19_us_h2d[0] = tl_s1n_18_ds_h2d[0];
  assign tl_s1n_18_ds_d2h[0] = tl_sm1_19_us_d2h[0];

  assign tl_sm1_16_us_h2d[1] = tl_s1n_18_ds_h2d[1];
  assign tl_s1n_18_ds_d2h[1] = tl_sm1_16_us_d2h[1];

  assign tl_sm1_21_us_h2d[0] = tl_s1n_18_ds_h2d[2];
  assign tl_s1n_18_ds_d2h[2] = tl_sm1_21_us_d2h[0];

  assign tl_sm1_23_us_h2d[0] = tl_s1n_18_ds_h2d[3];
  assign tl_s1n_18_ds_d2h[3] = tl_sm1_23_us_d2h[0];

  assign tl_sm1_25_us_h2d[0] = tl_s1n_18_ds_h2d[4];
  assign tl_s1n_18_ds_d2h[4] = tl_sm1_25_us_d2h[0];

  assign tl_sm1_27_us_h2d[0] = tl_s1n_18_ds_h2d[5];
  assign tl_s1n_18_ds_d2h[5] = tl_sm1_27_us_d2h[0];

  assign tl_sm1_29_us_h2d[0] = tl_s1n_18_ds_h2d[6];
  assign tl_s1n_18_ds_d2h[6] = tl_sm1_29_us_d2h[0];

  assign tl_sm1_31_us_h2d[0] = tl_s1n_18_ds_h2d[7];
  assign tl_s1n_18_ds_d2h[7] = tl_sm1_31_us_d2h[0];

  assign tl_sm1_33_us_h2d[0] = tl_s1n_18_ds_h2d[8];
  assign tl_s1n_18_ds_d2h[8] = tl_sm1_33_us_d2h[0];

  assign tl_sm1_19_us_h2d[1] = tl_s1n_35_ds_h2d[0];
  assign tl_s1n_35_ds_d2h[0] = tl_sm1_19_us_d2h[1];

  assign tl_sm1_16_us_h2d[2] = tl_s1n_35_ds_h2d[1];
  assign tl_s1n_35_ds_d2h[1] = tl_sm1_16_us_d2h[2];

  assign tl_sm1_21_us_h2d[1] = tl_s1n_35_ds_h2d[2];
  assign tl_s1n_35_ds_d2h[2] = tl_sm1_21_us_d2h[1];

  assign tl_sm1_23_us_h2d[1] = tl_s1n_35_ds_h2d[3];
  assign tl_s1n_35_ds_d2h[3] = tl_sm1_23_us_d2h[1];

  assign tl_sm1_25_us_h2d[1] = tl_s1n_35_ds_h2d[4];
  assign tl_s1n_35_ds_d2h[4] = tl_sm1_25_us_d2h[1];

  assign tl_sm1_27_us_h2d[1] = tl_s1n_35_ds_h2d[5];
  assign tl_s1n_35_ds_d2h[5] = tl_sm1_27_us_d2h[1];

  assign tl_sm1_29_us_h2d[1] = tl_s1n_35_ds_h2d[6];
  assign tl_s1n_35_ds_d2h[6] = tl_sm1_29_us_d2h[1];

  assign tl_sm1_31_us_h2d[1] = tl_s1n_35_ds_h2d[7];
  assign tl_s1n_35_ds_d2h[7] = tl_sm1_31_us_d2h[1];

  assign tl_sm1_33_us_h2d[1] = tl_s1n_35_ds_h2d[8];
  assign tl_s1n_35_ds_d2h[8] = tl_sm1_33_us_d2h[1];

  assign tl_s1n_14_us_h2d = tl_brqif_i;
  assign tl_brqif_o = tl_s1n_14_us_d2h;

  assign tl_debug_rom_o = tl_asf_15_ds_h2d;
  assign tl_asf_15_ds_d2h = tl_debug_rom_i;

  assign tl_flash_ctrl_o = tl_sm1_16_ds_h2d;
  assign tl_sm1_16_ds_d2h = tl_flash_ctrl_i;

  assign tl_asf_17_us_h2d = tl_brqlsu_i;
  assign tl_brqlsu_o = tl_asf_17_us_d2h;

  assign tl_s1n_18_us_h2d = tl_asf_17_ds_h2d;
  assign tl_asf_17_ds_d2h = tl_s1n_18_us_d2h;

  assign tl_dccm_o = tl_sm1_19_ds_h2d;
  assign tl_sm1_19_ds_d2h = tl_dccm_i;

  assign tl_timer0_o = tl_asf_20_ds_h2d;
  assign tl_asf_20_ds_d2h = tl_timer0_i;

  assign tl_asf_20_us_h2d = tl_sm1_21_ds_h2d;
  assign tl_sm1_21_ds_d2h = tl_asf_20_us_d2h;

  assign tl_timer1_o = tl_asf_22_ds_h2d;
  assign tl_asf_22_ds_d2h = tl_timer1_i;

  assign tl_asf_22_us_h2d = tl_sm1_23_ds_h2d;
  assign tl_sm1_23_ds_d2h = tl_asf_22_us_d2h;

  assign tl_timer2_o = tl_asf_24_ds_h2d;
  assign tl_asf_24_ds_d2h = tl_timer2_i;

  assign tl_asf_24_us_h2d = tl_sm1_25_ds_h2d;
  assign tl_sm1_25_ds_d2h = tl_asf_24_us_d2h;

  assign tl_timer3_o = tl_asf_26_ds_h2d;
  assign tl_asf_26_ds_d2h = tl_timer3_i;

  assign tl_asf_26_us_h2d = tl_sm1_27_ds_h2d;
  assign tl_sm1_27_ds_d2h = tl_asf_26_us_d2h;

  assign tl_timer4_o = tl_asf_28_ds_h2d;
  assign tl_asf_28_ds_d2h = tl_timer4_i;

  assign tl_asf_28_us_h2d = tl_sm1_29_ds_h2d;
  assign tl_sm1_29_ds_d2h = tl_asf_28_us_d2h;

  assign tl_plic_o = tl_asf_30_ds_h2d;
  assign tl_asf_30_ds_d2h = tl_plic_i;

  assign tl_asf_30_us_h2d = tl_sm1_31_ds_h2d;
  assign tl_sm1_31_ds_d2h = tl_asf_30_us_d2h;

  assign tl_xbar_peri_o = tl_asf_32_ds_h2d;
  assign tl_asf_32_ds_d2h = tl_xbar_peri_i;

  assign tl_asf_32_us_h2d = tl_sm1_33_ds_h2d;
  assign tl_sm1_33_ds_d2h = tl_asf_32_us_d2h;

  assign tl_asf_34_us_h2d = tl_dm_sba_i;
  assign tl_dm_sba_o = tl_asf_34_us_d2h;

  assign tl_s1n_35_us_h2d = tl_asf_34_ds_h2d;
  assign tl_asf_34_ds_d2h = tl_s1n_35_us_d2h;

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_14 = 2'd3;
    if ((tl_s1n_14_us_h2d.a_address & ~(ADDR_MASK_ICCM)) == ADDR_SPACE_ICCM) begin
      dev_sel_s1n_14 = 2'd0;

    end else if ((tl_s1n_14_us_h2d.a_address & ~(ADDR_MASK_DEBUG_ROM)) == ADDR_SPACE_DEBUG_ROM) begin
      dev_sel_s1n_14 = 2'd1;

    end else if ((tl_s1n_14_us_h2d.a_address & ~(ADDR_MASK_FLASH_CTRL)) == ADDR_SPACE_FLASH_CTRL) begin
      dev_sel_s1n_14 = 2'd2;
end
  end

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_18 = 4'd9;
    if ((tl_s1n_18_us_h2d.a_address & ~(ADDR_MASK_DCCM)) == ADDR_SPACE_DCCM) begin
      dev_sel_s1n_18 = 4'd0;

    end else if ((tl_s1n_18_us_h2d.a_address & ~(ADDR_MASK_FLASH_CTRL)) == ADDR_SPACE_FLASH_CTRL) begin
      dev_sel_s1n_18 = 4'd1;

    end else if ((tl_s1n_18_us_h2d.a_address & ~(ADDR_MASK_TIMER0)) == ADDR_SPACE_TIMER0) begin
      dev_sel_s1n_18 = 4'd2;

    end else if ((tl_s1n_18_us_h2d.a_address & ~(ADDR_MASK_TIMER1)) == ADDR_SPACE_TIMER1) begin
      dev_sel_s1n_18 = 4'd3;

    end else if ((tl_s1n_18_us_h2d.a_address & ~(ADDR_MASK_TIMER2)) == ADDR_SPACE_TIMER2) begin
      dev_sel_s1n_18 = 4'd4;

    end else if ((tl_s1n_18_us_h2d.a_address & ~(ADDR_MASK_TIMER3)) == ADDR_SPACE_TIMER3) begin
      dev_sel_s1n_18 = 4'd5;

    end else if ((tl_s1n_18_us_h2d.a_address & ~(ADDR_MASK_TIMER4)) == ADDR_SPACE_TIMER4) begin
      dev_sel_s1n_18 = 4'd6;

    end else if ((tl_s1n_18_us_h2d.a_address & ~(ADDR_MASK_PLIC)) == ADDR_SPACE_PLIC) begin
      dev_sel_s1n_18 = 4'd7;

    end else if ((tl_s1n_18_us_h2d.a_address & ~(ADDR_MASK_XBAR_PERI)) >= ADDR_SPACE_XBAR_PERI) begin
      dev_sel_s1n_18 = 4'd8;
end
  end

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_35 = 4'd9;
    if ((tl_s1n_35_us_h2d.a_address & ~(ADDR_MASK_DCCM)) == ADDR_SPACE_DCCM) begin
      dev_sel_s1n_35 = 4'd0;

    end else if ((tl_s1n_35_us_h2d.a_address & ~(ADDR_MASK_FLASH_CTRL)) == ADDR_SPACE_FLASH_CTRL) begin
      dev_sel_s1n_35 = 4'd1;

    end else if ((tl_s1n_35_us_h2d.a_address & ~(ADDR_MASK_TIMER0)) == ADDR_SPACE_TIMER0) begin
      dev_sel_s1n_35 = 4'd2;

    end else if ((tl_s1n_35_us_h2d.a_address & ~(ADDR_MASK_TIMER1)) == ADDR_SPACE_TIMER1) begin
      dev_sel_s1n_35 = 4'd3;

    end else if ((tl_s1n_35_us_h2d.a_address & ~(ADDR_MASK_TIMER2)) == ADDR_SPACE_TIMER2) begin
      dev_sel_s1n_35 = 4'd4;

    end else if ((tl_s1n_35_us_h2d.a_address & ~(ADDR_MASK_TIMER3)) == ADDR_SPACE_TIMER3) begin
      dev_sel_s1n_35 = 4'd5;

    end else if ((tl_s1n_35_us_h2d.a_address & ~(ADDR_MASK_TIMER4)) == ADDR_SPACE_TIMER4) begin
      dev_sel_s1n_35 = 4'd6;

    end else if ((tl_s1n_35_us_h2d.a_address & ~(ADDR_MASK_PLIC)) == ADDR_SPACE_PLIC) begin
      dev_sel_s1n_35 = 4'd7;

    end else if ((tl_s1n_35_us_h2d.a_address & ~(ADDR_MASK_XBAR_PERI)) >= ADDR_SPACE_XBAR_PERI) begin
      dev_sel_s1n_35 = 4'd8;
end
  end


  // Instantiation phase
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (12'h0),
    .DRspDepth (12'h0),
    .N         (3)
  ) u_s1n_14 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_14_us_h2d),
    .tl_h_o       (tl_s1n_14_us_d2h),
    .tl_d_o       (tl_s1n_14_ds_h2d),
    .tl_d_i       (tl_s1n_14_ds_d2h),
    .dev_select_i (dev_sel_s1n_14)
  );
  tlul_fifo_async #(
    .ReqDepth        (3),// At least 3 to make async work
    .RspDepth        (3) // At least 3 to make async work
  ) u_asf_15 (
    .clk_h_i      (clk_main_i),
    .rst_h_ni     (rst_main_ni),
    .clk_d_i      (clk_jtag_i),
    .rst_d_ni     (rst_jtag_ni),
    .tl_h_i       (tl_asf_15_us_h2d),
    .tl_h_o       (tl_asf_15_us_d2h),
    .tl_d_o       (tl_asf_15_ds_h2d),
    .tl_d_i       (tl_asf_15_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (3)
  ) u_sm1_16 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_16_us_h2d),
    .tl_h_o       (tl_sm1_16_us_d2h),
    .tl_d_o       (tl_sm1_16_ds_h2d),
    .tl_d_i       (tl_sm1_16_ds_d2h)
  );
  tlul_fifo_async #(
    .ReqDepth        (3),// At least 3 to make async work
    .RspDepth        (3) // At least 3 to make async work
  ) u_asf_17 (
    .clk_h_i      (clk_periph_i),
    .rst_h_ni     (rst_periph_ni),
    .clk_d_i      (clk_main_i),
    .rst_d_ni     (rst_main_ni),
    .tl_h_i       (tl_asf_17_us_h2d),
    .tl_h_o       (tl_asf_17_us_d2h),
    .tl_d_o       (tl_asf_17_ds_h2d),
    .tl_d_i       (tl_asf_17_ds_d2h)
  );
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (36'h0),
    .DRspDepth (36'h0),
    .N         (9)
  ) u_s1n_18 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_18_us_h2d),
    .tl_h_o       (tl_s1n_18_us_d2h),
    .tl_d_o       (tl_s1n_18_ds_h2d),
    .tl_d_i       (tl_s1n_18_ds_d2h),
    .dev_select_i (dev_sel_s1n_18)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_19 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_19_us_h2d),
    .tl_h_o       (tl_sm1_19_us_d2h),
    .tl_d_o       (tl_sm1_19_ds_h2d),
    .tl_d_i       (tl_sm1_19_ds_d2h)
  );
  tlul_fifo_async #(
    .ReqDepth        (3),// At least 3 to make async work
    .RspDepth        (3) // At least 3 to make async work
  ) u_asf_20 (
    .clk_h_i      (clk_main_i),
    .rst_h_ni     (rst_main_ni),
    .clk_d_i      (clk_periph_i),
    .rst_d_ni     (rst_periph_ni),
    .tl_h_i       (tl_asf_20_us_h2d),
    .tl_h_o       (tl_asf_20_us_d2h),
    .tl_d_o       (tl_asf_20_ds_h2d),
    .tl_d_i       (tl_asf_20_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_21 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_21_us_h2d),
    .tl_h_o       (tl_sm1_21_us_d2h),
    .tl_d_o       (tl_sm1_21_ds_h2d),
    .tl_d_i       (tl_sm1_21_ds_d2h)
  );
  tlul_fifo_async #(
    .ReqDepth        (3),// At least 3 to make async work
    .RspDepth        (3) // At least 3 to make async work
  ) u_asf_22 (
    .clk_h_i      (clk_main_i),
    .rst_h_ni     (rst_main_ni),
    .clk_d_i      (clk_periph_i),
    .rst_d_ni     (rst_periph_ni),
    .tl_h_i       (tl_asf_22_us_h2d),
    .tl_h_o       (tl_asf_22_us_d2h),
    .tl_d_o       (tl_asf_22_ds_h2d),
    .tl_d_i       (tl_asf_22_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_23 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_23_us_h2d),
    .tl_h_o       (tl_sm1_23_us_d2h),
    .tl_d_o       (tl_sm1_23_ds_h2d),
    .tl_d_i       (tl_sm1_23_ds_d2h)
  );
  tlul_fifo_async #(
    .ReqDepth        (3),// At least 3 to make async work
    .RspDepth        (3) // At least 3 to make async work
  ) u_asf_24 (
    .clk_h_i      (clk_main_i),
    .rst_h_ni     (rst_main_ni),
    .clk_d_i      (clk_periph_i),
    .rst_d_ni     (rst_periph_ni),
    .tl_h_i       (tl_asf_24_us_h2d),
    .tl_h_o       (tl_asf_24_us_d2h),
    .tl_d_o       (tl_asf_24_ds_h2d),
    .tl_d_i       (tl_asf_24_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_25 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_25_us_h2d),
    .tl_h_o       (tl_sm1_25_us_d2h),
    .tl_d_o       (tl_sm1_25_ds_h2d),
    .tl_d_i       (tl_sm1_25_ds_d2h)
  );
  tlul_fifo_async #(
    .ReqDepth        (3),// At least 3 to make async work
    .RspDepth        (3) // At least 3 to make async work
  ) u_asf_26 (
    .clk_h_i      (clk_main_i),
    .rst_h_ni     (rst_main_ni),
    .clk_d_i      (clk_periph_i),
    .rst_d_ni     (rst_periph_ni),
    .tl_h_i       (tl_asf_26_us_h2d),
    .tl_h_o       (tl_asf_26_us_d2h),
    .tl_d_o       (tl_asf_26_ds_h2d),
    .tl_d_i       (tl_asf_26_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_27 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_27_us_h2d),
    .tl_h_o       (tl_sm1_27_us_d2h),
    .tl_d_o       (tl_sm1_27_ds_h2d),
    .tl_d_i       (tl_sm1_27_ds_d2h)
  );
  tlul_fifo_async #(
    .ReqDepth        (3),// At least 3 to make async work
    .RspDepth        (3) // At least 3 to make async work
  ) u_asf_28 (
    .clk_h_i      (clk_main_i),
    .rst_h_ni     (rst_main_ni),
    .clk_d_i      (clk_periph_i),
    .rst_d_ni     (rst_periph_ni),
    .tl_h_i       (tl_asf_28_us_h2d),
    .tl_h_o       (tl_asf_28_us_d2h),
    .tl_d_o       (tl_asf_28_ds_h2d),
    .tl_d_i       (tl_asf_28_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_29 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_29_us_h2d),
    .tl_h_o       (tl_sm1_29_us_d2h),
    .tl_d_o       (tl_sm1_29_ds_h2d),
    .tl_d_i       (tl_sm1_29_ds_d2h)
  );
  tlul_fifo_async #(
    .ReqDepth        (3),// At least 3 to make async work
    .RspDepth        (3) // At least 3 to make async work
  ) u_asf_30 (
    .clk_h_i      (clk_main_i),
    .rst_h_ni     (rst_main_ni),
    .clk_d_i      (clk_periph_i),
    .rst_d_ni     (rst_periph_ni),
    .tl_h_i       (tl_asf_30_us_h2d),
    .tl_h_o       (tl_asf_30_us_d2h),
    .tl_d_o       (tl_asf_30_ds_h2d),
    .tl_d_i       (tl_asf_30_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_31 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_31_us_h2d),
    .tl_h_o       (tl_sm1_31_us_d2h),
    .tl_d_o       (tl_sm1_31_ds_h2d),
    .tl_d_i       (tl_sm1_31_ds_d2h)
  );
  tlul_fifo_async #(
    .ReqDepth        (3),// At least 3 to make async work
    .RspDepth        (3) // At least 3 to make async work
  ) u_asf_32 (
    .clk_h_i      (clk_main_i),
    .rst_h_ni     (rst_main_ni),
    .clk_d_i      (clk_periph_i),
    .rst_d_ni     (rst_periph_ni),
    .tl_h_i       (tl_asf_32_us_h2d),
    .tl_h_o       (tl_asf_32_us_d2h),
    .tl_d_o       (tl_asf_32_ds_h2d),
    .tl_d_i       (tl_asf_32_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_33 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_33_us_h2d),
    .tl_h_o       (tl_sm1_33_us_d2h),
    .tl_d_o       (tl_sm1_33_ds_h2d),
    .tl_d_i       (tl_sm1_33_ds_d2h)
  );
  tlul_fifo_async #(
    .ReqDepth        (3),// At least 3 to make async work
    .RspDepth        (3) // At least 3 to make async work
  ) u_asf_34 (
    .clk_h_i      (clk_jtag_i),
    .rst_h_ni     (rst_jtag_ni),
    .clk_d_i      (clk_main_i),
    .rst_d_ni     (rst_main_ni),
    .tl_h_i       (tl_asf_34_us_h2d),
    .tl_h_o       (tl_asf_34_us_d2h),
    .tl_d_o       (tl_asf_34_ds_h2d),
    .tl_d_i       (tl_asf_34_ds_d2h)
  );
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (36'h0),
    .DRspDepth (36'h0),
    .N         (9)
  ) u_s1n_35 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_35_us_h2d),
    .tl_h_o       (tl_s1n_35_us_d2h),
    .tl_d_o       (tl_s1n_35_ds_h2d),
    .tl_d_i       (tl_s1n_35_ds_d2h),
    .dev_select_i (dev_sel_s1n_35)
  );

endmodule
